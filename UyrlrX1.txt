const isOriginValid = !window.location.hostname.includes("ratings");
if (!isOriginValid) throw new Error("Invalid host");
const style = document.createElement("style"),
    menu = (style.innerText = `.shizoval_content{position:absolute;font-size:1rem;text-shadow:0 0 3px 2px #000;z-index:9999;top:.1rem;left:.1rem;min-height:600px;min-width:620px;border-radius:16px;background:linear-gradient(29deg,rgb(0 0 0 / .349544783733806) 0%,rgb(42 42 42 / .7198529069831057) 70%);backdrop-filter:blur(6px);filter:brightness(.8);border:1px solid rgb(255 255 255 / 3%);box-shadow:0 10px 30px rgb(0 0 0 / .8)}.shizoval_content .fly{position:absolute;top:12%;left:5%;height:220px;width:90%;box-shadow:0 0 16px 5px rgb(0 0 0 / .45);background:rgb(255 255 255 / .02);border-radius:16px}.shizoval_content .weapon{position:absolute;top:58%;left:5%;height:230px;width:45%;box-shadow:0 0 16px 5px rgb(0 0 0 / .45);background:rgb(255 255 255 / .02);border-radius:16px}#targetState, .targetState, .antiAimPos{font-size:17px}.shizoval_content .other{position:absolute;top:58%;right:5%;height:230px;width:40%;box-shadow:0 0 16px 5px rgb(0 0 0 / .45);background:rgb(255 255 255 / .02);border-radius:16px}.shizoval_content .fly p,.shizoval_content .weapon p,.shizoval_content .other p{position:absolute;font-size:19px}.shizoval_content h1{margin-top:23px;font-size:18px;color:#fff}.shizoval_content .mines{position:absolute;bottom:3%;left:8%;font-size:20px}.shizoval_content .mines span,.shizoval_content .version span{color:#bada55}.notify-message{position:absolute;left:50%;transform:translate(-50%;-50%);top:10%;transition:top 3s ease;border-radius:15px;color:#fff;z-index:99999;margin-top:20px;height:50px;min-width:70px;width:auto}.shizoval_content input[type="checkbox"]{height:0;width:0;position:absolute;visibility:hidden}.shizoval_content label{cursor:pointer;text-indent:-9999px;width:50px;height:25px;box-shadow:inset 0 0 13px 2px rgb(0 0 0 / .2);background:rgb(177 177 177 / 11%);border:2px solid rgb(255 255 255 / .14);display:block;border-radius:100px;position:absolute}.shizoval_content label:after{content:'';position:absolute;top:2px;left:5px;width:18px;height:18px;background:#fff0;border:2px solid rgb(255 255 255 / .14);border-radius:90px;transition:0.3s}.bindState{color:rgb(255 255 255 / .5);font-size:20px;position:absolute}.shizoval_content input:checked+label{background:#bada559a}.shizoval_content input:checked+label:after{left:calc(100% - 5px);border:2px solid rgb(255 255 255 / .4);transform:translateX(-100%)}.shizoval_content label:active:after{width:30px}.shizoval_content input[type="range"]{font-size:1.5rem;width:12.5em}.shizoval_content input[type="range"]{color:#bada55;--thumb-height:1.125em;--track-height:0.125em;--track-color:rgba(255, 255, 255, 0.2);--brightness-hover:180%;--brightness-down:80%;--clip-edges:0.125em}@media (prefers-color-scheme:dark){.shizoval_content input[type="range"]{color:#bada55;--track-color:rgba(255, 255, 255, 0.1)}}.shizoval_content input[type="range"]{position:relative;background:#fff0;overflow:hidden}.shizoval_content input[type="range"]:active{cursor:grabbing}.shizoval_content input[type="range"],.shizoval_content input[type="range"]::-webkit-slider-runnable-track,.shizoval_content input[type="range"]::-webkit-slider-thumb{-webkit-appearance:none;transition:all ease 100ms;height:var(--thumb-height)}.shizoval_content input[type="range"]::-webkit-slider-runnable-track,.shizoval_content input[type="range"]::-webkit-slider-thumb{position:relative}.shizoval_content input[type="range"]::-webkit-slider-thumb{--thumb-radius:calc((var(--thumb-height) * 0.5) - 1px);--clip-top:calc((var(--thumb-height) - var(--track-height)) * 0.5 - 0.5px);--clip-bottom:calc(var(--thumb-height) - var(--clip-top));--clip-further:calc(100% + 1px);--box-fill:calc(-100vmax - var(--thumb-width, var(--thumb-height))) 0 0 100vmax currentColor;width:var(--thumb-width,var(--thumb-height));background:linear-gradient(currentColor 0 0) scroll no-repeat left center / 50% calc(var(--track-height) + 1px);background-color:currentColor;box-shadow:var(--box-fill);border-radius:var(--thumb-width,var(--thumb-height));filter:brightness(100%);clip-path:polygon(100% -1px,var(--clip-edges) -1px,0 var(--clip-top),-100vmax var(--clip-top),-100vmax var(--clip-bottom),0 var(--clip-bottom),var(--clip-edges) 100%,var(--clip-further) var(--clip-further))}.shizoval_content input[type="range"]:hover::-webkit-slider-thumb{filter:brightness(var(--brightness-hover));cursor:grab}.shizoval_content input[type="range"]:active::-webkit-slider-thumb{filter:brightness(var(--brightness-down));cursor:grabbing}.shizoval_content input[type="range"]::-webkit-slider-runnable-track{background:linear-gradient(var(--track-color) 0 0) scroll no-repeat center / 100% calc(var(--track-height) + 1px)}.shizoval_content input[type="range"]:disabled::-webkit-slider-thumb{cursor:not-allowed}.shizoval_content input[type="range"],.shizoval_content input[type="range"]::-moz-range-track,.shizoval_content input[type="range"]::-moz-range-thumb{appearance:none;transition:all ease 100ms;height:var(--thumb-height)}.shizoval_content input[type="range"]::-moz-range-track,.shizoval_content input[type="range"]::-moz-range-thumb,.shizoval_content input[type="range"]::-moz-range-progress{background:#fff0}.shizoval_content input[type="range"]::-moz-range-thumb{background:currentColor;border:0;width:var(--thumb-width,var(--thumb-height));border-radius:var(--thumb-width,var(--thumb-height));cursor:grab}.shizoval_content input[type="range"]:active::-moz-range-thumb{cursor:grabbing}.shizoval_content input[type="range"]::-moz-range-track{width:100%;background:var(--track-color)}.shizoval_content input[type="range"]::-moz-range-progress{appearance:none;background:currentColor;transition-delay:30ms}.shizoval_content input[type="range"]::-moz-range-track,.shizoval_content input[type="range"]::-moz-range-progress{height:calc(var(--track-height) + 1px);border-radius:var(--track-height)}.shizoval_content input[type="range"]::-moz-range-thumb,.shizoval_content input[type="range"]::-moz-range-progress{filter:brightness(100%)}.shizoval_content input[type="range"]:hover::-moz-range-thumb,.shizoval_content input[type="range"]:hover::-moz-range-progress{filter:brightness(var(--brightness-hover))}.shizoval_content input[type="range"]:active::-moz-range-thumb,.shizoval_content input[type="range"]:active::-moz-range-progress{filter:brightness(var(--brightness-down))}`, document.createElement("div")),
    userSettings = (menu.innerHTML = '<center><h1>Utils (V1.1)</h1></center><div class=fly><p style=top:5%;left:5% class=hack-name>Airbreak</p><span class=bindState style=top:5%;left:24%>F</span> <input type=range max=400 min=10 step=1 style=position:absolute;top:20%;left:25%;width:50% value=120 disabled> <span class=bindState style=top:5%;right:24%>V</span> <input type=checkbox id=flyHackState> <label for=flyHackState style=position:absolute;top:13%;right:5%></label><p style=top:30%;left:5% class=hack-name>AntiAim <span class=antiAimPos>[Top]</span></p><input type=checkbox id=antiAimState> <label for=antiAimState style=position:absolute;top:36%;right:5%></label><p style=top:52%;left:5% class=hack-name>Freeze</p><input type=checkbox id=freezeState> <label for=freezeState style=position:absolute;top:58%;right:5%></label><p style=top:73%;left:5% class=hack-name>Stick <span class=targetState>[All]</span></p><input type=checkbox id=stickState> <label for=stickState style=position:absolute;top:80%;right:5%></label></div><div class=weapon><p style=top:2%;left:10% class=hack-name>Clumsy</p><input type=checkbox id=clumsyState> <label for=clumsyState style=position:absolute;top:10%;right:10%></label><p style=top:20%;left:10% class=hack-name>AimAssist</p><input type=checkbox id=aimBotState> <label for=aimBotState style=position:absolute;top:28%;right:10%></label><p style=top:38%;left:10% class=hack-name>Jump</p><input type=checkbox id=jumpState> <label for=jumpState style=position:absolute;top:46%;right:10%></label><p style=top:56%;left:10% class=hack-name>Target<p style=position:absolute;top:58%;right:12%;color:#bada55 id=targetState><p style=top:72%;left:10% class=hack-name>Shells<p style=position:absolute;top:72%;right:12%;color:#bada55 id=shellsCount>0</div><div class=other><p style=top:2%;left:5% class=hack-name>FPS+</p><input type=checkbox id=fpsHackState> <label for=fpsHackState style=position:absolute;top:10%;right:10%></label><p style=top:20%;left:5% class=hack-name>OldPhysics</p><input type=checkbox id=oldPhysicsState> <label for=oldPhysicsState style=position:absolute;top:28%;right:10%></label><p style=top:38%;left:5% class=hack-name>FOV</p><input type=range id=fovValueState max=2 min=0.8 step=0.001 style=position:absolute;top:48%;left:25%;width:35% value=1.0471976> <input type=checkbox id=fovState> <label for=fovState style=position:absolute;top:46%;right:10%></label><p style=top:56%;left:5% class=hack-name>Autoshoot</p><input type=checkbox id=autoShotState> <label for=autoShotState style=position:absolute;top:64%;right:10%></label><p style=top:74%;left:5% class=hack-name>Recoil</p><input type=number id=recoilValueState max=250 min=0 step=1 style="position:absolute;top:83%;left:30%;width:31%;height:15px;border:none;border-radius:5px;color:#fff;padding:3px 0 3px 5px;background:linear-gradient(29deg,rgb(0 0 0 / .349544783733806) 0,rgb(42 42 42 / .7198529069831057) 70%)"> <input type=checkbox id=recoilState> <label for=recoilState style=position:absolute;top:81%;right:10%></label></div>', menu.className = "shizoval_content", menu.style.display = "block", document.body.appendChild(menu), document.head.appendChild(style), JSON.parse(localStorage.getItem("shizovalParams"))),
    states = (document.querySelector("#recoilValueState").value = localStorage.getItem("recoilValue") ?? 2, [() => objects.features.weapon.clumsyEnabled = !1, () => objects.features.fpsHack.isEnabled = !1, () => objects.features.fly.antiAimEnabled = !1, () => objects.features.fly.isEnabled = !1, () => objects.features.stick.isEnabled = !1, () => objects.features.weapon.aimBotEnabled = !1, () => objects.features.autoShootEnabled = !1, () => objects.features.fly.freezeEnabled = !1, () => objects.features.fovEnabled = !1, () => objects.features.weapon.recoilEnabled = !1]);
class KeyPressing {
    static k = [];
    static i() {
        document.addEventListener("keydown", e => {
            this.e, e = e.key.toLowerCase(), 0 == KeyPressing.k.includes(e) && KeyPressing.k.push(e)
        }), document.addEventListener("keyup", e => {
            e = e.key.toLowerCase();
            1 == KeyPressing.k.includes(e) && -1 !== (e = KeyPressing.k.indexOf(e)) && KeyPressing.k.splice(e, 1)
        })
    }
    static isKeyPressed(e) {
        return KeyPressing.k.includes(e)
    }
}
KeyPressing.i();
class Utils {
    constructor() {}
    get rootElement() {
        return document.getElementById("root")
    }
    get isChatOpen() {
        return document.activeElement !== document.body
    }
    filterArray = function(e) {
        return null != e
    };
    getObjectName = function(e) {
        return e?.constructor?.name
    };
    equal = (e, t) => e?.toUpperCase() === t?.toUpperCase();
    fuzzySearch = function(e, t) {
        var s = t.length,
            a = e.length;
        if (s < a) return !1;
        if (a === s) return e === t;
        e: for (var i = 0, o = 0; i < a; i++) {
            for (var n = e.charkeyAt(i); o < s;)
                if (t.charkeyAt(o++) === n) continue e;
            return !1
        }
        return !0
    };
    findObjectByName = function(e, t, s = -1, a = !1, i = !1) {
        let o = 0;
        for (const n in e)
            if ("object" == typeof e[n] && (i ? this.fuzzySearch(t, this.getObjectName(e[n])) : this.equal(this.getObjectName(e[n]), t))) {
                if (-1 === s || s === o) return a ? [n, e[n]] : e[n];
                o++
            }
    };
    pressKey = e => {
        e = {
            code: e
        }, document.dispatchEvent(new KeyboardEvent("keydown", e)), document.dispatchEvent(new KeyboardEvent("keyup", e)), dispatchEvent(new KeyboardEvent("keydown", e)), dispatchEvent(new KeyboardEvent("keyup", e))
    };
    findByPath = function(e, t) {
        if ("string" == typeof t || Array.isArray(t)) {
            const i = Array.isArray(t) ? t : t.split(".");
            let a = e;
            return i.forEach((e, t) => {
                var s;
                if (a) return t = t === i.length - 1, "object" != typeof(a = a[e] || ("i:" === e.slice(0, 2) ? this.findByIndex(a, e.slice(2, e.length), t) : "fuzzy:" === e.slice(0, 6) ? this.findObjectByName(a, e.slice(6, e.length), -1, t, !0) : 2 === (s = e.split(":")).length ? this.findObjectByName(a, s[0], +s[1], t) : this.findObjectByName(a, e, -1, t))) ? a : void 0
            }), a
        }
    };
    getComponentNames = function(e) {
        if ("object" == typeof e || "function" == typeof e) {
            var t, s, a = {};
            for ([t, s] of Object.entries(e))
                if (Array.isArray(s)) a[t] = s;
                else if ("function" == typeof s && s.callableName) a[s.callableName] = e[t];
            else {
                var i = s?.constructor?.$metadata$?.simpleName;
                if (i)
                    if (a[i])
                        for (let e = 0;; e++) {
                            var o = i + "_" + e;
                            if (!a[o]) {
                                a[o] = s;
                                break
                            }
                        } else a[i] = s
            }
            return a.original = e, a
        }
    };
    getByProto = function(e, t, s) {
        if (e && t && null != s)
            for (const i of Object.values(e)) try {
                var a = i?.__proto__;
                if ((Object.values(a)?.[s])?.toString()?.includes(t) || a?.toString()?.includes(t)) return i
            } catch {}
    };
    findByProtoString = (e, t, s) => e ? Object.values(e).filter(e => Object.values(e.__proto__).toString().includes(t))[s] : null;
    getObj = function(e, t, s) {
        if (e && t && s) {
            var a = e;
            for (const o of a)
                if ("object" == typeof a) {
                    var i = o?.__proto__;
                    if (Object.values(i)[s]?.toString()?.includes(t)) return o
                }
        }
    };
    findByIndex = (e, t, s = !1) => (e = Object.entries(e)?.[t], s ? e : "object" == typeof e?.[1] ? e[1] : e?.[0]);
    getByLength = function(t, s) {
        var a = [];
        for (let e = 0; e < t.length; e++) {
            var i, o = [];
            for (i in t[e]) "object" == typeof t[e][i] && o.push(t[e][i]);
            o.length == s && a.push(o)
        }
        return a
    };
    findObjectByLength = (e, t, s) => e ? Object.values(e).filter(e => e ? Object.values(e).length == t : null)[s] : null;
    componentStarter = function(e, t = new Set) {
        if (!t.has(e)) {
            if (t.add(e), "ModalComponent" === e?.constructor?.$metadata$?.simpleName) return e;
            for (var s in e)
                if ("object" == typeof e[s] && (s = this.componentStarter(e[s], t))) return s
        }
        return null
    };
    get rootObject() {
        if (this.rootElement) return this.componentStarter(this.rootElement)
    }
    get isGameReady() {
        if (e = this.rootObject) {
            var e = this.getBySimpleName(e, ""),
                e = this.getBySimpleName(e, "");
            if (null != (e = Object.entries(e)?.[1]?.[1])) return e = Object.entries(e)?.[1]?.[1], e = this.getByLength(e, 3)?.[1]?.[0], document.querySelectorAll(".shizoval_content input[type=checkbox]"), document.querySelector(".BattleComponentStyle-canvasContainer") || states.concat(Array.from(document.querySelectorAll(".shizoval_content input[type=checkbox]"))).forEach(e => {
                "function" == typeof e ? e() : ["oldPhysicsState", "jumpState"].includes(e.id) || (e.checked = !1)
            }), !!e || (document.querySelector("#aimBotState").checked = document.querySelector("#flyHackState").checked = document.querySelector("#fovState").checked = document.querySelector("#stickState").checked = document.querySelector("#autoShotState").checked = document.querySelector("#recoilState").checked = !1, states[1](), states[4](), states[5](), states[6](), states[9](), !1)
        }
    }
    getByName = function(e, t) {
        for (const s in e)
            if (e[s]?.constructor?.name === t && "object" == typeof e[s]) return e[s]
    };
    getBySimpleName = function(e, t) {
        for (const s in e)
            if (e[s]?.constructor?.$metadata$?.simpleName === t && "object" == typeof e[s]) return e[s]
    };
    objectsMatch = (e, t) => JSON.stringify(e) === JSON.stringify(t);
    findByTypes = (s, a, e) => {
        if (s) return (e = Object.keys(s).map(e => {
            const t = {
                index: e
            };
            return Object.values(s[e]).forEach(e => {
                e = typeof e, t.hasOwnProperty(e) ? t[e]++ : t[e] = 1
            }), t
        }).filter(e => {
            let {
                index: t,
                ...s
            } = e;
            return this.objectsMatch(s, a)
        })[e])?.index ? s[e.index] : null
    };
    errorLog = function(e) {
        throw new Error("[shizoval] " + e)
    };
    notify = function(e, t) {
        const s = document.createElement("div");
        s.innerHTML = e, s.style.backgroundColor = t, s.className = "notify-message", document.body.appendChild(s), setTimeout(() => {
            s.style.top = "-100%"
        }, 2e3)
    };
    getRandom = function(e, t) {
        return Math.random() * (t - e) + e
    }
}
const utils = new Utils;
window.Utils = utils;
let targetNick = "";
const contextObserver = new MutationObserver(e => {
    e.forEach(e => {
        "childList" === e.type && e.addedNodes.forEach(e => {
            1 === e.nodeType && (e = e.querySelector(".ContextMenuStyle-menu > div > div > div > div > span ")?.innerText.replace(/^\s*\[(.*?)\]\s*/, "").trim()) && objects.features?.weapon?.clumsyEnabled && (targetNick = e, document.querySelector("#targetState").innerText = targetNick)
        })
    })
});
contextObserver.observe(document.body, {
    childList: !0,
    subtree: !0
});
class GameObjects {
    constructor() {}
    get TOState() {
        return utils.getBySimpleName(utils.rootObject, "")
    }
    get userName() {
        return utils.findByPath(objects.gameObjects.user, "i:0.i:16")[1]
    }
    get store() {
        return utils.getBySimpleName(this.TOState, "")
    }
    get user() {
        return utils.findByPath(objects.gameObjects.TOState, "i:3.i:4")[1]
    }
    world = {
        get world() {
            if (utils.isGameReady) {
                var e = utils.rootObject,
                    e = utils.getBySimpleName(e, ""),
                    e = utils.getBySimpleName(e, "");
                if (null != (e = Object.entries(e)[1][1])) return e = Object.entries(e)[1][1], e = utils.getByLength(e, 3)[1][0], utils.getComponentNames(Object.entries(e)[1][1])
            }
        }
    };
    get gameMode() {
        var e;
        if (utils.isGameReady) return e = this.world.world, e = utils.getComponentNames(e).ArrayList_0, e = Object.entries(e)[1][1], e = utils.getComponentNames(e[0]), e = Object.entries(e.original)[5][1], Object.entries(e)[0][1]
    }
    get game() {
        return utils.findByPath(objects.gameObjects.world.world, "ArrayList_0.i:1.0")
    }
    get mines() {
        var e;
        if (utils.isGameReady) return e = Object.entries(utils.getObj(this.gameMode, "putMine", 1))[11][1], e = utils.findByPath(e, "i:1")[1], Object.entries(e)[1][1]
    }
    get shellFactory() {
        if (utils.isGameReady) return utils.getByProto(objects.gameObjects.localTank.components, "createShell", 2)
    }
    get validShells() {
        var e = utils.getByProto(objects.gameObjects.localTank.components, "createShell", 2);
        if (e) return e = utils.findObjectByLength(e, 4, 0), utils.findByPath(e, "i:1.i:1")?.[1]
    }
    localTank = {
        get components() {
            if (utils.isGameReady) {
                var e = utils.rootObject,
                    e = utils.getBySimpleName(e, ""),
                    e = utils.getBySimpleName(e, "");
                if (null != (e = Object.values(Object.entries(e)[1][1])[1])) return e = utils.findByTypes(e, {
                    object: 2,
                    boolean: 1
                }, 0) ?? findByTypes(e, {
                    object: 2,
                    boolean: 1
                }, 1), e = Object.values(e)[0], e = utils.findByProtoString(e, "map", 0), e = Object.values(utils.findObjectByLength(e, 1, 1))[0], e = Object.values(Object.values(Object.values(e.get("LocalTank"))[0])[0])[0], Object.values(utils.findByProtoString(e, "compare", 0))[0]
            }
        },
        get tankPhysics() {
            if (utils.isGameReady) return utils.findByProtoString(objects.gameObjects.localTank.components, "setPhysicsTransform", 0)
        },
        get HoverParams() {
            var e;
            if (utils.isGameReady) return e = utils.findByProtoString(objects.gameObjects.localTank.components, "engineList", 0), utils.findByProtoString(e, "HoverChassisParams", 0)
        },
        get turretRecoil() {
            if (utils.isGameReady) return utils.findByProtoString(objects.gameObjects.localTank.components, "onShot", 1)
        },
        get targetingSystem() {
            var e;
            if (utils.isGameReady) return e = utils.findByProtoString(objects.gameObjects.localTank.components, "tankInputComponent", 1), Object.values(e?.__proto__)?.toString()?.includes("startFollowWeaponMount") ? utils.findByProtoString(objects.gameObjects.localTank.components, "tankInputComponent", 2) : e
        }
    };
    get players() {
        var e;
        if (utils.isGameReady) return e = utils.getByProto(objects.gameObjects.localTank.components, "tankPhysicsComponent", 6), e = Object.entries(e)[7][1], e = utils.findByPath(e, "i:7")[1], e = utils.findByPath(e, "i:8")[1], e = utils.findByPath(e, "i:1")[1], utils.findByPath(e, "i:0")[1]
    }
}
const turretsIndex = {
    ThunderCC: [{
        index: 1,
        speed: 12e3
    }, {
        index: 2,
        speed: 500
    }, {
        index: 4,
        speed: 13e3
    }],
    SmokyCC: [{
        index: 3,
        speed: 47460.31494140625
    }, {
        index: 2,
        speed: 33777.777099609375
    }, {
        index: 5,
        speed: 45666.66564941406
    }],
    MachineGunCC: [{
        index: 3,
        speed: 21393.939208984375
    }, {
        index: 2,
        speed: 1e4
    }, {
        index: 7,
        speed: 28051.28173828125
    }],
    RicochetCC: [{
        index: 4,
        speed: 500
    }, {
        index: 5,
        speed: 14209.091186523438
    }, {
        index: 7,
        speed: 7996.153259277344
    }],
    TwinsCC: [{
        index: 1,
        speed: 4836.36360168457
    }],
    RocketLauncherCC: [{
        index: 4,
        speed: 100
    }],
    GaussCC: [{
        index: 6,
        speed: 3e4
    }, {
        index: 7,
        speed: 500
    }, {
        index: 8,
        speed: 3e4
    }],
    ScorpioCC: [{
        index: 3,
        speed: 8e4
    }]
};
class Features {
    constructor() {}
    tank = {
        jumpEnabled: !1,
        jump: function() {
            var e;
            utils.isGameReady && objects?.features?.tank?.jumpEnabled && (e = objects?.features?.fly?.options?.params?.BodyState, (e = utils.findObjectByLength(e, 3, 0))[Object.keys(e)[2]] += 250)
        },
        oldPhysicsEnabled: !1,
        oldPhysics: function() {
            var e;
            objects.features.tank.oldPhysicsEnabled && setTimeout(objects.features.tank.oldPhysics, 3e3), utils.isGameReady && (e = objects.gameObjects.localTank.HoverParams, objects.features.tank.oldPhysicsEnabled ? (e[Object.keys(e)[2]] = 1, e[Object.keys(e)[3]] = 10) : (e[Object.keys(e)[2]] = 6.2831854820251465, e[Object.keys(e)[3]] = 5))
        }
    };
    weapon = {
        aimBotEnabled: !1,
        clumsyEnabled: !1,
        recoilEnabled: !1,
        target: void 0,
        get params() {
            var e;
            if (utils.isGameReady) return e = objects.gameObjects?.localTank.targetingSystem, {
                TargetingSystemWithHorizontalAimAssist: utils.findByPath(e, "i:6")[1]
            }
        },
        setSpeed: function() {
            if (objects.features.weapon.clumsyEnabled && setTimeout(objects.features.weapon.setSpeed, 2e3), utils.isGameReady) {
                var e = objects.gameObjects?.shellFactory;
                const t = utils.getByProto(e, "CC", 1);
                e = Object.entries(turretsIndex).find(e => t.toString().includes(e[0]))[1], objects.features?.weapon?.clumsyEnabled ? e.forEach(e => {
                    t[Object.keys(t)[e.index]] = 1e-4
                }) : e.forEach(e => {
                    t[Object.keys(t)[e.index]] = e.speed
                })
            }
        },
        getTarget: function() {
            if (utils.isGameReady && objects?.features?.weapon?.clumsyEnabled) {
                var e = objects.gameObjects?.shellFactory;
                Object.entries(e)[7][1];
                for (const a of objects.gameObjects.players) {
                    var t = Object.entries(a)[5][1],
                        t = Object.entries(t)[0][1],
                        s = utils.findByProtoString(t, "setPhysicsTransform", 0),
                        s = Object.entries(s)[18][1],
                        s = Object.entries(s)[24][1],
                        s = Object.entries(s)[3][1];
                    null != (t = utils.getByProto(t, "setClan", 4)) && Object.entries(t)?.[4]?.[1] == targetNick && (this.target = s)
                }
            }
        },
        setRecoil: function() {
            var e, t;
            utils.isGameReady && (e = objects?.gameObjects?.localTank?.turretRecoil, t = utils.findByPath(e, "i:3"), objects?.features?.weapon?.recoilEnabled ? (e[t[0]] = 45e5 * document.querySelector("#recoilValueState").value, requestAnimationFrame(objects.features?.weapon?.setRecoil)) : e[t[0]] = 45e5)
        },
        aimBot: function() {
            var e, t, s, a, i;
            utils.isGameReady && (objects?.features?.weapon?.clumsyEnabled ? (document.querySelector("#aimBotState").checked = !1, objects.features.weapon.aimBotEnabled = !1) : (e = objects.features?.weapon.params.TargetingSystemWithHorizontalAimAssist, t = utils.findByPath(e, "i:1")?.[1], s = utils.findByPath(e, "i:2")?.[0], a = utils.findByPath(t, "i:0")?.[0], i = utils.findByPath(t, "i:1")?.[0], objects.features?.weapon.aimBotEnabled ? (t && a && (e[s] = !0, t[a] = 250, t[i] = .1), requestAnimationFrame(objects.features?.weapon.aimBot)) : (e[s] = !1, t[a] = 4, t[i] = .01)))
        },
        teleportShells: function() {
            if (utils.isGameReady && objects?.features?.weapon?.clumsyEnabled && (objects.features.fly.options.params, objects.features.weapon.target)) {
                var e, t, s = {
                        x: Object.entries(objects.features.weapon.target)[0][1],
                        y: Object.entries(objects.features.weapon.target)[1][1],
                        z: Object.entries(objects.features.weapon.target)[2][1]
                    },
                    a = [];
                for (e of objects.gameObjects.validShells) {
                    var i = Object.entries(e)[5][1],
                        i = Object.entries(i)[0][1],
                        i = Object.entries(i)[1][1],
                        i = utils.getByProto(i, "Vector3", 0);
                    a.push(i)
                }
                for (t of a) t[Object.keys(t)[0]] = s.x, t[Object.keys(t)[1]] = s.y, t[Object.keys(t)[2]] = s.z
            }
        }
    };
    fpsHack = {
        isEnabled: !1,
        process: function() {
            if (objects.features.fpsHack.isEnabled && (requestAnimationFrame(objects.features?.fpsHack.process), utils.isGameReady)) {
                let i, o, n, r, e = utils.findByPath(objects?.gameObjects.world.world, "ArrayList_0.i:1.0");
                const l = [...utils.findByPath(e, "i:3.i:0")?.[1]];
                l?.forEach((e, t) => {
                    if (e = e[1], (i = i || utils.findByPath(e, "i:0")?.[0]) && (o = o || utils.findByPath(e[i], "i:0")?.[0]) && e?.[i]?.[o])
                        for (const a of e[i][o]) {
                            var s;
                            if (n = n || utils.findByPath(a, "i:1")?.[0], "removeMines" === a[n]?.callableName) return s = l[t + 5][1][i][o][0][n], r = s?.toString().split(".")[1].split(")")[0], s()
                        }
                })
            }
        }
    };
    fly = {
        get killZones() {
            var e = utils.findByPath(objects.gameObjects.gameMode, "i:0.i:7")[1];
            return {
                minX: Object.entries(e)[0][1],
                minY: Object.entries(e)[1][1] - 80,
                minZ: Object.entries(e)[2][1],
                maxX: Object.entries(e)[3][1],
                maxY: Object.entries(e)[4][1],
                maxZ: Object.entries(e)[5][1]
            }
        },
        isOffZone(e, t, s) {
            return e > objects.features.fly.killZones.maxX || e < objects.features.fly.killZones.minX || t > objects.features.fly.killZones.maxY || t < objects.features.fly.killZones.minY || s > objects.features.fly.killZones.maxZ + 2e3 || s < objects.features.fly.killZones.minZ
        },
        speed: 120,
        isEnabled: !1,
        freezeEnabled: !1,
        antiAimEnabled: !1,
        antiAimBottom: !1,
        antiAim: function() {
            var e, t, s;
            objects.features.fly.antiAimEnabled && (requestAnimationFrame(objects.features.fly.antiAim), utils.isGameReady) && (e = objects.gameObjects.localTank.tankPhysics, e = Object.entries(e)[9][1], t = utils.findByPath(e, "i:2")[0], s = utils.findByPath(e, "i:1")[0], e[utils.findByPath(e, "i:0")[0]] = utils.getRandom(objects.features.fly.killZones.minX, objects.features.fly.killZones.maxX), e[s] = utils.getRandom(objects.features.fly.killZones.minY, objects.features.fly.killZones.maxY), e[t] = objects.features.fly.antiAimBottom ? utils.getRandom(objects.features.fly.killZones.minZ, objects.features.fly.killZones.minZ) : utils.getRandom(objects.features.fly.killZones.maxZ, objects.features.fly.killZones.maxZ))
        },
        options: {
            get params() {
                var e;
                if (utils.isGameReady) return {
                    TankPhysics: e = objects.gameObjects.localTank.tankPhysics,
                    Body: e = Object.entries(e)[18][1],
                    BodyState: e = Object.entries(e)[23][1],
                    Quaternion: Object.entries(e)[1][1]
                }
            },
            setMovable: function() {
                var e;
                utils.isGameReady && (Object.entries(objects.features.fly.options.params.BodyState)[3][1], e = objects.features.fly.options.params.Body, 1 == objects.features.fly.isEnabled || 1 == objects.features.stick.isEnabled ? e[Object.keys(e)[5]] = !1 : e[Object.keys(e)[5]] = !0)
            },
            freezeTanks: function() {
                if (utils.isGameReady)
                    for (const s of objects.gameObjects?.players) {
                        var e = Object.entries(s)[5][1],
                            e = Object.entries(e)[0][1],
                            t = utils.getByProto(e, "setPhysicsTransform", 7),
                            t = Object.entries(t)[18][1];
                        null != (e = utils.getByProto(e, "setClan", 4)) && Object.entries(e)?.[4]?.[1] != objects.gameObjects.userName && (1 == objects.features.fly.freezeEnabled ? t[Object.keys(t)[5]] = !1 : t[Object.keys(t)[5]] = !0)
                    }
            },
            quaternion: function() {
                var e;
                utils.isGameReady && (objects.features.fly.isEnabled || objects.features.stick.isEnabled) && ((e = objects.features.fly.options.params.Quaternion)[Object.keys(e)[0]] = e[Object.keys(e)[1]] = e[Object.keys(e)[2]] = e[Object.keys(e)[3]] = 0, requestAnimationFrame(objects.features.fly.options.quaternion))
            },
            orientation: function() {
                var e, t;
                utils.isGameReady && objects.features.fly.isEnabled && (e = document.querySelector(".shizoval_content > div.fly > input[type=range]:nth-child(3)"), t = Object.entries(objects.features.fly.options.params.BodyState)[3][1], objects.features.fly.options.params.Body, KeyPressing.isKeyPressed(userSettings?.fly?.flyLeft ?? "a") && 0 == utils.isChatOpen && t[Object.keys(t)[0]] > objects.features.fly.killZones.minX && (t[Object.keys(t)[0]] -= objects.features.fly.speed), KeyPressing.isKeyPressed(userSettings?.fly?.flyRight ?? "d") && 0 == utils.isChatOpen && t[Object.keys(t)[0]] < objects.features.fly.killZones.maxX && (t[Object.keys(t)[0]] += objects.features.fly.speed), KeyPressing.isKeyPressed(userSettings?.fly?.flyForward ?? "w") && 0 == utils.isChatOpen && t[Object.keys(t)[1]] < objects.features.fly.killZones.maxY && (t[Object.keys(t)[1]] += objects.features.fly.speed), KeyPressing.isKeyPressed(userSettings?.fly?.flyBackward ?? "s") && 0 == utils.isChatOpen && t[Object.keys(t)[1]] > objects.features.fly.killZones.minY && (t[Object.keys(t)[1]] -= objects.features.fly.speed), KeyPressing.isKeyPressed(userSettings?.fly?.flyUp ?? "q") && 0 == utils.isChatOpen && t[Object.keys(t)[2]] < objects.features.fly.killZones.maxZ && (t[Object.keys(t)[2]] += objects.features.fly.speed), KeyPressing.isKeyPressed(userSettings?.fly?.flyDown ?? "e") && 0 == utils.isChatOpen && t[Object.keys(t)[2]] > objects.features.fly.killZones.minZ && (t[Object.keys(t)[2]] -= objects.features.fly.speed), KeyPressing.isKeyPressed(userSettings?.fly?.speedDown ?? "f") && 0 == utils.isChatOpen && 1 <= objects.features.fly.speed && (--objects.features.fly.speed, e.value = objects.features.fly.speed), KeyPressing.isKeyPressed(userSettings?.fly?.speedUp ?? "v") && 0 == utils.isChatOpen && objects.features.fly.speed <= 400 && (objects.features.fly.speed += 1, e.value = objects.features.fly.speed), requestAnimationFrame(objects.features.fly.options.orientation))
            }
        }
    };
    stick = {
        isEnabled: !1,
        index: 0,
        currentTarget: null,
        team: null,
        zAxis: 0,
        teleport: function() {
            if (utils.isGameReady && objects.features.stick.isEnabled) {
                requestAnimationFrame(() => this.teleport());
                var t, s, a, i, o = utils.findByPath(objects.gameObjects.user, "i:0.i:1.i:0")[1],
                    n = [];
                for (const c of objects.gameObjects.players) {
                    var r = Object.entries(c)[5][1],
                        r = Object.entries(r)[0][1],
                        l = utils.findByPath(r[4], "i:3.i:0")[1];
                    n.push({
                        id: l,
                        nativeList: r
                    })
                }
                let e = n?.[this.index];
                e ? (this.currentTarget ? e = n.find(e => e.id == this.currentTarget) : this.currentTarget = e.id, e && (e?.id == o || (o = utils.getByProto(e.nativeList, "setClan", 4), o = utils.findByPath(o, "i:8.i:0")?.[1], this.team && o !== this.team) ? (this.index++, this.currentTarget = null) : (o = utils.getByProto(e.nativeList, "setPhysicsTransform", 7), o = Object.entries(o)[18][1], o = Object.entries(o)[24][1], o = Object.entries(o)[3][1], o = {
                    x: Object.values(o)[0],
                    y: Object.values(o)[1],
                    z: Object.values(o)[2]
                }, t = objects.gameObjects.localTank.tankPhysics, t = Object.entries(t)[18][1], t = Object.entries(t)[23][1], t = Object.entries(t)[3][1], s = utils.findByPath(t, "i:0")[0], a = utils.findByPath(t, "i:1")[0], i = utils.findByPath(t, "i:2")[0], objects.features.fly.isOffZone(o.x, o.y, o.z) || (t[s] = o.x, t[a] = o.y, t[i] = o.z + this.zAxis)))) : this.index = 0
            }
        }
    };
    autoShootEnabled = !1;
    autoShootInterval = null;
    autoShoot = () => {
        if (utils.isGameReady) {
            const t = utils.getByProto(objects.gameObjects?.localTank.components, "weaponTrigger", 3),
                s = utils.findByPath(t, "i:5")?.[1];
            if (t || s) {
                const a = utils.findByPath(s, "i:5")?.[0],
                    i = utils.findByPath(s, "i:6")?.[0];
                var e;
                (a || i) && (objects.features?.autoShootEnabled ? (objects.features.autoShootInterval = setInterval(() => {
                    s[i] = s[a] = !0
                }), (e = objects.gameObjects?.validShells) && 20 <= e?.length && objects.features.weapon.teleportShells()) : (s[i] = s[a] = !1, clearInterval(objects.features.autoShootInterval), objects.features.autoShootInterval = null))
            }
        }
    };
    fovEnabled = !1;
    fov = function() {
        if (utils.isGameReady) {
            let s;
            objects.features?.fovEnabled ? (s = document.querySelector("#fovValueState").value, requestAnimationFrame(objects.features?.fov)) : s = 1.0471976;
            var e = utils.findByProtoString(objects.gameObjects?.localTank?.components, "onSpawnCameraTransformQuery", 0),
                e = utils.findByPath(e, "i:22")?.[1],
                a = utils.findByPath(e, "__proto__.i:1")?.[0];
            if (e || a) {
                e.copy || (e.copy = e[a]);
                let t = "";
                e[a] = function(e) {
                    t = t || utils.findByPath(e, "i:0")?.[0], this.copy(e), e[t] = s
                }
            }
        }
    }
}
let objects = {
    gameObjects: void 0,
    features: void 0
};

function initHelpers() {
    objects.features?.weapon?.clumsyEnabled && (document.querySelector("#shellsCount").innerText = objects?.gameObjects?.validShells?.length || 0), requestAnimationFrame(initHelpers)
}

function initObjects() {
    objects.gameObjects = new GameObjects, objects.features = new Features, window.GameObjects = objects.gameObjects, window.Features = objects.features
}
initObjects(), initHelpers();
const FOV = () => {
        utils.isGameReady && (objects.features.fovEnabled = document.querySelector("#fovState").checked, objects.features?.fov())
    },
    FPSHack = () => {
        utils.isGameReady && (objects.features.fpsHack.isEnabled = document.querySelector("#fpsHackState").checked, objects.features?.fpsHack.process())
    },
    flyHack = () => {
        utils.isGameReady && (objects.features.fly.isEnabled = document.querySelector("#flyHackState").checked, objects.features.fly.options.quaternion(), objects.features.fly.options.setMovable(), objects.features.fly.options.orientation())
    },
    freezeTanks = () => {
        utils.isGameReady && (objects.features.fly.freezeEnabled = document.querySelector("#freezeState").checked, objects.features.fly.options.freezeTanks())
    },
    AA = () => {
        utils.isGameReady && (objects.features.fly.antiAimEnabled = document.querySelector("#antiAimState").checked, objects.features.fly.antiAim())
    },
    Clumsy = () => {
        utils.isGameReady && (objects.features.weapon.clumsyEnabled = document.querySelector("#clumsyState").checked, objects.features.weapon.setSpeed(), document.addEventListener("keydown", e => {
            utils.isChatOpen || utils.equal(e.key, userSettings?.clumsy?.release ?? "r") && (objects?.features?.weapon?.getTarget(), objects.features.weapon.teleportShells())
        }))
    },
    AimBot = () => {
        utils.isGameReady && (objects.features.weapon.aimBotEnabled = document.querySelector("#aimBotState").checked, objects.features.weapon.aimBot())
    },
    Jump = () => {
        objects.features.tank.jumpEnabled = document.querySelector("#jumpState").checked, document.addEventListener("keydown", e => {
            utils.equal(e.key, userSettings?.jump?.state ?? "f") && !utils.isChatOpen && objects.features.tank.jump()
        })
    },
    oldPhysics = () => {
        objects.features.tank.oldPhysicsEnabled = document.querySelector("#oldPhysicsState").checked, objects.features.tank.oldPhysics()
    },
    autoShoot = () => {
        utils.isGameReady && (objects.features.autoShootEnabled = document.querySelector("#autoShotState").checked, objects.features.autoShoot())
    },
    Recoil = () => {
        utils.isGameReady && !utils.isChatOpen && (objects.features.weapon.recoilEnabled = document.querySelector("#recoilState").checked, objects.features.weapon.setRecoil())
    },
    Stick = () => {
        utils.isGameReady && !utils.isChatOpen && (objects.features.stick.isEnabled = document.querySelector("#stickState").checked, objects.features.fly.options.quaternion(), objects.features.fly.options.setMovable(), objects.features.stick.teleport())
    },
    targetType = (document.querySelector("#stickState").addEventListener("click", Stick), document.querySelector("#clumsyState").addEventListener("click", Clumsy), document.querySelector("#flyHackState").addEventListener("click", flyHack), document.querySelector("#antiAimState").addEventListener("click", AA), document.querySelector("#freezeState").addEventListener("click", freezeTanks), document.querySelector("#aimBotState").addEventListener("click", AimBot), document.querySelector("#fpsHackState").addEventListener("click", FPSHack), document.querySelector("#oldPhysicsState").addEventListener("click", oldPhysics), document.querySelector("#autoShotState").addEventListener("click", autoShoot), document.querySelector("#fovState").addEventListener("click", FOV), document.querySelector("#recoilState").addEventListener("click", Recoil), document.querySelector("#jumpState").addEventListener("click", Jump), document.querySelector("#recoilValueState").addEventListener("change", e => {
        localStorage.setItem("recoilValue", e.target.value)
    }), [null, "ENEMY", "ALLY"]);
let targetIndex = 0;
document.querySelector(".targetState").addEventListener("click", e => {
    ++targetIndex > targetType.length - 1 && (targetIndex = 0), objects.features.stick.team = targetType[targetIndex] ?? null;
    var t = objects?.features?.stick?.team;
    e.target.innerText = `[${t?t.charAt(0).toUpperCase()+t.slice(1).toLowerCase():"All"}]`, objects.features.stick.all = !objects.features.stick.all
}), document.querySelector(".antiAimPos").addEventListener("click", e => {
    objects.features.fly.antiAimBottom = !objects.features.fly.antiAimBottom, e.target.innerText = objects.features.fly.antiAimBottom ? "[Bottom]" : "[Top]"
}), document.addEventListener("keydown", e => {
    utils.isChatOpen || (utils.equal(e.key, userSettings?.fly?.state ?? "Shift") && 2 == e.location && utils.isGameReady ? (document.querySelector("#flyHackState").checked = !objects.features.fly.isEnabled, flyHack()) : utils.equal(e.key, userSettings?.aa?.state ?? "Alt") && utils.isGameReady ? (document.querySelector("#antiAimState").checked = !objects.features.fly.antiAimEnabled, AA()) : utils.equal(e.key, userSettings?.stick?.state ?? "b") && utils.isGameReady ? (document.querySelector("#stickState").checked = !objects.features.stick.isEnabled, Stick()) : utils.equal(e.key, userSettings?.stick?.selectTarget ?? "y") && objects.features.stick.isEnabled ? (objects.features.stick.currentTarget = null, objects.features.stick.index++) : utils.equal(e.key, userSettings?.stick?.zUp ?? "q") && objects.features.stick.isEnabled ? objects.features.stick.zAxis += 15 : utils.equal(e.key, userSettings?.stick?.zDown ?? "e") && objects.features.stick.isEnabled ? objects.features.stick.zAxis -= 15 : utils.equal(e.key, userSettings?.gui?.state ?? "Insert") && ("block" == menu.style.display ? menu.style.display = "none" : menu.style.display = "block"))
});
let offsetX, offsetY, offsetXIcon, offsetYIcon, isDragging = !1,
    isIconDragging = !1,
    canDrag = !0;
menu.addEventListener("mousedown", ({
    target: e,
    clientX: t,
    clientY: s
}) => {
    "input" === e.tagName.toLowerCase() || "label" === e.tagName.toLowerCase() ? canDrag = !1 : (canDrag = !0, isDragging = !0, offsetX = t - menu.getBoundingClientRect().left, offsetY = s - menu.getBoundingClientRect().top)
}), document.addEventListener("mousemove", e => {
    isDragging && canDrag && (menu.style.left = e.clientX - offsetX + "px", menu.style.top = e.clientY - offsetY + "px")
}), document.addEventListener("mouseup", () => {
    isDragging = !1
})
